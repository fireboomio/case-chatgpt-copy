{"path":"customize/chatGPT","depend":null,"script":"import { GraphQLObjectType, GraphQLSchema, GraphQLString, GraphQLInt, GraphQLInputObjectType } from 'graphql'\nimport { PubSub } from 'graphql-subscriptions';\nimport { FastifyBaseLogger } from 'fastify/types/logger'\nimport { InternalClient } from 'fireboom-wundersdk/server'\nimport { Mutations, Queries } from 'generated/fireboom.internal.client';\nimport axios from 'axios';\n\nconst PromptInput = new GraphQLInputObjectType({\n    name: 'PromptInput',\n    fields: () =\u003e ({\n        prompt: { type: GraphQLString },\n        chatId: { type: GraphQLInt },\n        regenId: { type: GraphQLInt }\n    })\n});\n\nconst OpenAI = new GraphQLObjectType({\n    name: 'OpenAI',\n    description: 'OpenAI API proxy',\n    fields: () =\u003e {\n        return {\n            completion: {\n                type: GraphQLString,\n                args: {\n                    promptInput: { type: PromptInput }\n                },\n                subscribe: async ({ }, { promptInput }, ctx) =\u003e {\n                    const pubsub = new PubSub();\n                    const channel = String(Date.now());\n                    console.log(promptInput)\n                    const { log, internalClient } = ctx.wundergraph\n\n                    try {\n                        //const getMsgRes = await internalClient.queries.ChatGPT__Chat__GetManyChatMessage({ input: { equals: promptInput.chatId } })\n                        //const msg = getMsgRes.data.data.map((x: { text: any, parentMessageId: any }) =\u003e ({ content: x.text, role: (x.parentMessageId ? \"assistant\" : \"user\") }))\n                        const msg = []\n                        msg.push(({ \"role\": \"user\", \"content\": promptInput.prompt }))\n                        axios.post(\n                            'https://api.openai.com/v1/chat/completions',\n                            {\n                                \"model\": \"gpt-3.5-turbo\",\n                                \"messages\": msg,\n                                stream: true\n                            },\n                            {\n                                headers: {\n                                    Authorization: `Bearer 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`,\n                                    'Content-Type': 'application/json',\n                                },\n                                responseType: 'stream', // 设为流响应类型\n                            }\n                        ).then(res =\u003e {\n                            const id = Math.floor(Math.random() * 1e10)\n                            const msgData = [] as any\n                            res.data.on('data', (data: any) =\u003e {\n                                data.toString().split('\\n').filter((x: string) =\u003e x.trim()).forEach((line: string) =\u003e {\n                                    if (line === 'data: [DONE]') {\n                                        console.log('完球')\n                                        //internalClient.mutations.ChatGPT__Chat__CreateOneChatMessage({ input: { equals: promptInput.chatId } })\n                                        pubsub.publish(channel, {completion: JSON.stringify({ data: msgData.join(''), id: id, finish: true })})\n                                    } else {\n                                        const json = JSON.parse(line.substring(6))\n                                        msgData.push(json.choices[0].delta.content || '')\n                                        pubsub.publish(channel, {completion: JSON.stringify({ data: msgData.join(''), id: id, finish: false })})\n                                    }\n                                })\n                            })\n                        }).catch(err =\u003e {\n                            console.log(err)\n                        })\n\n                    } catch (e) {\n                        console.error(e)\n                    }\n\n                    // Return the initial completion message to the client\n                    return pubsub.asyncIterator(channel)\n                }\n            }\n        };\n    }\n});\n// Define the GraphQL schema\nconst schema = new GraphQLSchema({\n    subscription: OpenAI,\n    query: new GraphQLObjectType\u003cany, {\n        wundergraph: {\n            log: FastifyBaseLogger,\n            internalClient: InternalClient\u003cQueries, Mutations\u003e\n        }\n    }\u003e({\n        name: 'Query',\n        fields: {\n            hello: {\n                type: GraphQLString,\n                resolve() {\n                    return 'world'\n                },\n            },\n        },\n    }\n    ),\n});\n\nexport default schema;\n","enabled":true,"scriptType":"","input":null,"type":""}
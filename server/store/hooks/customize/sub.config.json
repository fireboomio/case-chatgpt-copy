{"path":"customize/sub","depend":null,"script":"import { GraphQLObjectType, GraphQLSchema, GraphQLString, GraphQLInputObjectType } from 'graphql';\nimport { PubSub } from 'graphql-subscriptions';\nimport { FastifyBaseLogger } from 'fastify/types/logger';\nimport { InternalClient } from 'fireboom-wundersdk/server';\nimport { Mutations, Queries } from 'generated/fireboom.internal.client';\nimport axios, { AxiosResponse } from 'axios';\n\nconst pubsub = new PubSub();\n\nconst PromptInput = new GraphQLInputObjectType({\n  name: 'PromptInput',\n  fields: () =\u003e ({\n    prompt: { type: GraphQLString },\n    parentMessageId: { type: GraphQLString }\n  })\n});\n\nconst Subscription = new GraphQLObjectType({\n  name: 'Subscription',\n  description: 'OpenAI API proxy',\n  fields: () =\u003e {\n    return {\n      completion: {\n        type: GraphQLString,\n        args: {\n          promptInput: { type: PromptInput }\n        },\n        resolve: async ({}, { promptInput }, context) =\u003e {\n          const channel = 'openai';\n          console.log(promptInput);\n          // Construct the OpenAI request payload\n          const payload = {\n            prompt: `${promptInput.prompt}\\n\\n${context.messages}`,\n            temperature: 0.5,\n            max_tokens: 50\n          };\n\n          // Call the OpenAI API to generate a response\n          const response: AxiosResponse = await axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n            prompt: payload.prompt,\n            max_tokens: payload.max_tokens,\n            temperature: payload.temperature,\n            stream: true\n          }, {\n            headers: {\n              'Authorization': `Bearer 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`,\n              'Content-Type': 'application/json'\n            }\n          });\n\n          // Return the async iterator for the subscription\n          return {\n            [Symbol.asyncIterator]: () =\u003e ({\n              async next() {\n                const chunk = await new Promise(resolve =\u003e response.data.once('data', resolve));\n                const text = (chunk as Buffer).toString(); // Add type assertion here\n                pubsub.publish(channel, { completion: text });\n                return { done: false, value: text };\n              },\n              async return() {\n                response.data.destroy();\n                return { done: true, value: null };\n              },\n              [Symbol.asyncIterator]() {\n                return this;\n              },\n            }),\n          };\n        },\n         subscribe: (parent, args, { pubsub2 }) =\u003e {\n          console.log(\"pubsub-\u003e\", pubsub)\n          return pubsub.asyncIterator('openai')\n        },\n      }\n    };\n  }\n});\n\n// Define the GraphQL schema\nconst schema = new GraphQLSchema({\n  subscription: Subscription,\n  query: new GraphQLObjectType\u003cany, {\n    wundergraph: {\n      log: FastifyBaseLogger,\n      internalClient: InternalClient\u003cQueries, Mutations\u003e\n    }\n  }\u003e({\n    name: 'Query',\n    fields: {\n      hello: {\n        type: GraphQLString,\n        resolve() {\n          return 'world'\n        },\n      },\n    },\n  }\n  ),\n});\n\nexport default schema;\n","enabled":false,"scriptType":"","input":null,"type":""}
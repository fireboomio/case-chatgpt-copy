{
"graphql_operation_files": [
{
"operation_name": "ChatGPT__Chat__CreateOneChatMessage",
"api_mount_path": "ChatGPT/Chat/CreateOneChatMessage",
"file_path": "ChatGPT/Chat/CreateOneChatMessage.graphql",
"content": "mutation ChatGPT__Chat__CreateOneChatMessage($text: String!, $parentMessageId: String, $chatId: Int!){data: grace_createOneChatMessage(data: {text: $text,parentMessageId: $parentMessageId,History: {connect: {id: $chatId}}}){id text parentMessageId createdAt chatId}}"
},
{
"operation_name": "ChatGPT__Chat__CreateOneHistory",
"api_mount_path": "ChatGPT/Chat/CreateOneHistory",
"file_path": "ChatGPT/Chat/CreateOneHistory.graphql",
"content": "mutation ChatGPT__Chat__CreateOneHistory($title: String!, $userId: String! @fromClaim(name: USERID) ){data: grace_createOneHistory(data: {title: $title,User: {connect: {id: $userId}}}){id title createdAt updatedAt}}"
},
{
"operation_name": "ChatGPT__Chat__DeleteOneChatMessage",
"api_mount_path": "ChatGPT/Chat/DeleteOneChatMessage",
"file_path": "ChatGPT/Chat/DeleteOneChatMessage.graphql",
"content": "mutation ChatGPT__Chat__DeleteOneChatMessage($id: Int!){data: grace_deleteOneChatMessage(where: {id: $id}){id}}"
},
{
"operation_name": "ChatGPT__Chat__DeleteOneHistory",
"api_mount_path": "ChatGPT/Chat/DeleteOneHistory",
"file_path": "ChatGPT/Chat/DeleteOneHistory.graphql",
"content": "mutation ChatGPT__Chat__DeleteOneHistory($id: Int!){data: grace_deleteOneHistory(where: {id: $id}){id}}"
},
{
"operation_name": "ChatGPT__Chat__GetHistoryList",
"api_mount_path": "ChatGPT/Chat/GetHistoryList",
"file_path": "ChatGPT/Chat/GetHistoryList.graphql",
"content": "query ChatGPT__Chat__GetHistoryList($take: Int = 10, $skip: Int = 0, $orderBy: [grace_HistoryOrderByWithRelationInput], $query: grace_HistoryWhereInput)@internalOperation {data: grace_findManyHistory(skip: $skip, take: $take, orderBy: $orderBy, where: {AND: $query}){id title createdAt updatedAt} total: grace_aggregateHistory(where: {AND: $query})@transform(get: \"_count.id\") {_count {id}}}"
},
{
"operation_name": "ChatGPT__Chat__GetManyChatMessage",
"api_mount_path": "ChatGPT/Chat/GetManyChatMessage",
"file_path": "ChatGPT/Chat/GetManyChatMessage.graphql",
"content": "query ChatGPT__Chat__GetManyChatMessage @internalOperation {data: grace_findManyChatMessage {id text parentMessageId createdAt chatId}}"
},
{
"operation_name": "ChatGPT__Chat__UpdateOneHistory",
"api_mount_path": "ChatGPT/Chat/UpdateOneHistory",
"file_path": "ChatGPT/Chat/UpdateOneHistory.graphql",
"content": "mutation ChatGPT__Chat__UpdateOneHistory($id: Int!, $title: String){data: grace_updateOneHistory(data: {title: {set: $title}}, where: {id: $id}){id title createdAt updatedAt}}"
},
{
"operation_name": "ChatGPT__Propmt__CreateOnePrompt",
"api_mount_path": "ChatGPT/Propmt/CreateOnePrompt",
"file_path": "ChatGPT/Propmt/CreateOnePrompt.graphql",
"content": "mutation ChatGPT__Propmt__CreateOnePrompt($prompt: String!, $title: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: UnixDate) ){data: grace_createOnePrompt(data: {prompt: $prompt,title: $title,updatedAt: $updatedAt}){id prompt title createdAt updatedAt}}"
},
{
"operation_name": "ChatGPT__Propmt__DeleteManyPrompt",
"api_mount_path": "ChatGPT/Propmt/DeleteManyPrompt",
"file_path": "ChatGPT/Propmt/DeleteManyPrompt.graphql",
"content": "mutation ChatGPT__Propmt__DeleteManyPrompt($ids: [Int]!){data: grace_deleteManyPrompt(where: {id: {in: $ids}}){count}}"
},
{
"operation_name": "ChatGPT__Propmt__DeleteOnePrompt",
"api_mount_path": "ChatGPT/Propmt/DeleteOnePrompt",
"file_path": "ChatGPT/Propmt/DeleteOnePrompt.graphql",
"content": "mutation ChatGPT__Propmt__DeleteOnePrompt($id: Int!){data: grace_deleteOnePrompt(where: {id: $id}){id}}"
},
{
"operation_name": "ChatGPT__Propmt__GetPromptList",
"api_mount_path": "ChatGPT/Propmt/GetPromptList",
"file_path": "ChatGPT/Propmt/GetPromptList.graphql",
"content": "query ChatGPT__Propmt__GetPromptList($take: Int = 10, $skip: Int = 0, $orderBy: [grace_PromptOrderByWithRelationInput], $query: grace_PromptWhereInput){data: grace_findManyPrompt(skip: $skip, take: $take, orderBy: $orderBy, where: {AND: $query}){id prompt title createdAt updatedAt} total: grace_aggregatePrompt(where: {AND: $query})@transform(get: \"_count.id\") {_count {id}}}"
},
{
"operation_name": "ChatGPT__Propmt__UpdateOnePrompt",
"api_mount_path": "ChatGPT/Propmt/UpdateOnePrompt",
"file_path": "ChatGPT/Propmt/UpdateOnePrompt.graphql",
"content": "mutation ChatGPT__Propmt__UpdateOnePrompt($id: Int!, $prompt: String, $title: String, $updatedAt: DateTime! @injectCurrentDateTime(format: UnixDate) ){data: grace_updateOnePrompt(data: {prompt: {set: $prompt},title: {set: $title},updatedAt: {set: $updatedAt}}, where: {id: $id}){id prompt title createdAt updatedAt}}"
},
{
"operation_name": "User__CreateOneUser",
"api_mount_path": "User/CreateOneUser",
"file_path": "User/CreateOneUser.graphql",
"content": "mutation User__CreateOneUser($avatar: String!, $bio: String!, $id: String!, $name: String!, $provider: String = \"\")@internalOperation {data: grace_createOneUser(data: {id: $id,name: $name,avatar: $avatar,bio: $bio,provider: $provider}){id}}"
},
{
"operation_name": "User__GetOneUser",
"api_mount_path": "User/GetOneUser",
"file_path": "User/GetOneUser.graphql",
"content": "query User__GetOneUser($id: String = \"\")@internalOperation {data: grace_findFirstUser(where: {id: {equals: $id}}){id bio avatar name}}"
}
],
"typescript_operation_files": [
{
"operation_name": "ChatGPT__Subscription__ChatSSE",
"api_mount_path": "ChatGPT/Subscription/ChatSSE",
"file_path": "ChatGPT/Subscription/ChatSSE.ts",
"module_path": "operations/ChatGPT/Subscription/ChatSSE"
}
],
"info": [
"skipping non .ts file: ChatGPT/Subscription/ChatSSE.js"
],
"questions": null
}